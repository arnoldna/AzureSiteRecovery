{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "location": {
            "type": "string",
            "metadata": {
                "description": "The location under which the resources reside"
            }
        },
        "locationDR": {
            "type": "string",
            "metadata": {
                "description": "The location under which the DR resources reside"
            }
        },
        "recoveryVaultName": {
            "type": "string",
            "metadata": {
                "description": "The name of the Azure Site Recovery vault"
            }
        },
        "cacheStorageAccountName": {
            "type": "string",
            "maxLength": 24,
            "metadata": {
                "description": "The name of the cache storage account for the source virtual machines"
            }
        },
        "automationAccountName": {
            "type": "string",
            "metadata": {
                "description": "The automation account name that will be used in conjuction with the ASR vault for tasks"
            }
        },
        "logAnalyticsName": {
            "type": "string",
            "metadata": {
                "description": "The log analytics workspace name"
            }
        },
        "logAnalyticsResourceGroupName": {
            "type": "string",
            "metadata": {
                "description": "The log analytics resource group name"
            }
        },
        "vNetName": {
            "type": "string",
            "metadata": {
                "description": "Name of the existing virtual network to deploy the resources into."
            }
        },
        "vnetResourceGroupName": {
            "type": "string",
            "metadata": {
                "description": "Resource group name of the existing virtual network to deploy resources into."
            }
        },
        "vNetNameDR": {
            "type": "string",
            "metadata": {
                "description": "Name of the existing virtual network of the DR to deploy the resources into."
            }
        },
        "vnetResourceGroupNameDR": {
            "type": "string",
            "metadata": {
                "description": "Resource group name of the existing virtual network of the DR to deploy resources into."
            }
        },
        "resourceGroups": {
            "type": "object",
            "metadata": {
                "description": "The resource groups definition of the IaaS VMs that need protection"
            }
        },
        "vmsDefinition": {
            "type": "object",
            "metadata": {
                "description": "The definition virtual machines that need to be protected"
            }
        },
        "diagnosticsLogStorageAccountNameDR": {
            "type": "string",
            "metadata": {
                "description": "The diagnostics logs "
            }
        },
        "_runbookArtifactsLocation": {
            "type": "string",
            "metadata": {
                "description": "The storage account location where the runbooks artifacts are located"
            }
        },
        "runbookArtifactsContainerName": {
            "type": "string",
            "metadata": {
                "description": "description"
            }
        },
        "_runbookArtifactsLocationSasToken": {
            "type": "securestring",
            "metadata": {
                "description": "The storage account sas token where the runbooks artifacts are located"
            }
        },
        "deployRecoveryPlan": {
            "type": "bool",
            "metadata": {
                "description": "Enables or disables the recovery plan deployment. Should be set to false once the plan has been created"
            }
        }
    },
    "variables": {
        "webSourceResourceGroupName": "[parameters('resourceGroups').web.source]",
        "webDestinationResourceGroupName": "[parameters('resourceGroups').web.destination]",

        // The fabric object in the vault represents an Azure region.
        // https://docs.microsoft.com/en-us/azure/site-recovery/azure-to-azure-powershell#create-a-site-recovery-fabric-object-to-represent-the-primary-source-region
        "sourceFabricName": "[concat(parameters('recoveryVaultName'), '/', parameters('location'),'-fabric')]",
        "targetFabricName": "[concat(parameters('recoveryVaultName'), '/', parameters('locationDR'),'-fabric')]",
        "sourceFabricId": "[resourceId('Microsoft.RecoveryServices/vaults/replicationFabrics',parameters('recoveryVaultName'),concat(parameters('location'),'-fabric'))]",
        "targetFabricId": "[resourceId('Microsoft.RecoveryServices/vaults/replicationFabrics',parameters('recoveryVaultName'),concat(parameters('locationDR'),'-fabric'))]",

        // The protection container is a container used to group replicated items within a fabric.
        "sourceContainerName": "[concat(variables('sourceFabricName'), '/', parameters('location'), '-container')]",
        "targetContainerName": "[concat(variables('targetFabricName'), '/', parameters('locationDR'), '-container')]",
        "sourceContainerId": "[resourceId('Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers',parameters('recoveryVaultName'),concat(parameters('location'),'-fabric'),concat(parameters('location'),'-container'))]",
        "targetContainerId": "[resourceId('Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers',parameters('recoveryVaultName'),concat(parameters('locationDR'),'-fabric'),concat(parameters('locationDR'),'-container'))]",

        "sourceContainerMappingName": "[concat(variables('sourceContainerName'), '/', parameters('location'), '-', parameters('locationDR'), '-24-hour-retention-policy')]",
        "targetContainerMappingName": "[concat(variables('targetContainerName'), '/', parameters('locationDR'), '-', parameters('location'), '-24-hour-retention-policy')]",
        "sourceContainerMappingId": "[resourceId('Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectionContainerMappings',parameters('recoveryVaultName'),concat(parameters('location'),'-fabric'),concat(parameters('location'),'-container'), concat(parameters('location'),'-', parameters('locationDR'),'-24-hour-retention-policy'))]",

        "sourcevNetMappingName": "[concat(variables('sourceFabricName'), '/azureNetwork/', parameters('location'),'-', parameters('locationDR'),'-',parameters('vNetName'))]",
        "targetvNetMappingName": "[concat(variables('targetFabricName'), '/azureNetwork/', parameters('locationDR'),'-', parameters('location'),'-',parameters('vNetNameDR'))]",
        "sourcevNetMappingId": "[resourceId('Microsoft.RecoveryServices/vaults/replicationFabrics/replicationNetworks/replicationNetworkMappings',parameters('recoveryVaultName'),concat(parameters('location'),'-fabric'),'AzureNetwork',concat(parameters('location'), '-', parameters('locationDR'),'-',parameters('vNetName')))]",
        "targetvNetMappingId": "[resourceId('Microsoft.RecoveryServices/vaults/replicationFabrics/replicationNetworks/replicationNetworkMappings',parameters('recoveryVaultName'),concat(parameters('locationDR'),'-fabric'),'AzureNetwork',concat(parameters('locationDR'), '-', parameters('location'),'-',parameters('vNetNameDR')))]",

        "web1": {
            "name": "[parameters('vmsDefinition').web1.name]",
            "subnetNameDR": "[parameters('vmsDefinition').web1.subnetNameDR]",
            "zone": "[parameters('vmsDefinition').web1.zone]"
        },
        "web2": {
            "name": "[parameters('vmsDefinition').web2.name]",
            "subnetNameDR": "[parameters('vmsDefinition').web2.subnetNameDR]",
            "zone": "[parameters('vmsDefinition').web2.zone]"
        },

        "asrScripts": {
            "runbooks": [
                {
                    "name": "SiteRecovery-SetUserManagedIdentity",
                    "url": "[uri(parameters('_runbookArtifactsLocation'), concat(parameters('runbookArtifactsContainerName'),'/','SiteRecovery-SetUserManagedIdentity.ps1', parameters('_runbookArtifactsLocationSasToken')))]",
                    "type": "PowerShell",
                    "description": "ASR Runbook to set the user managed identity on the virtual machines"
                }
            ],
            // Define the required modules for the Runbooks we're using
            "modules": [
                {
                    "name": "Az.Automation",
                    "url": "https://devopsgallerystorage.blob.core.windows.net/packages/az.automation.1.3.7.nupkg"
                },
                {
                    "name": "Az.Compute",
                    "url": "https://devopsgallerystorage.blob.core.windows.net/packages/az.compute.4.4.0.nupkg"
                },
                {
                    "name": "Az.ManagedServiceIdentity",
                    "url": "https://devopsgallerystorage.blob.core.windows.net/packages/az.managedserviceidentity.0.7.3.nupkg"
                }
            ]
        },
        // Define AzAccounts as a separate variable, because it will need to be called first for import into Automation Account, before all the others
        "azAccounts": {
            "name": "Az.Accounts",
            "url": "https://devopsgallerystorage.blob.core.windows.net/packages/az.accounts.1.9.4.nupkg"
        }
    },
    "resources": [
        {
            // Cache Storage Account
            // Site Recovery needs extra storage account called cache storage in the source region.
            // All the changes happening on the source VMs are tracked and sent to cache storage account before replicating those to the target location.
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-04-01",
            "name": "[parameters('cacheStorageAccountName')]",
            "location": "[parameters('locationDR')]",
            "sku": {
                "name": "Standard_LRS"
            },
            "kind": "StorageV2",
            "properties": {}
        },
        {
            "type": "Microsoft.RecoveryServices/vaults",
            "apiVersion": "2016-06-01",
            "name": "[parameters('recoveryVaultName')]",
            // Important:
            // * The Recovery services vault and the virtual machines being protected, must be in different Azure locations.
            // * The resource group of the Recovery services vault, and the virtual machines being protected, must be in different Azure locations.
            // * The Recovery services vault, and the resource group to which it belongs, can be in the same Azure location.
            // see https://docs.microsoft.com/en-us/azure/site-recovery/azure-to-azure-powershell#create-a-recovery-services-vault
            "location": "[parameters('locationDR')]",
            "sku": {
                "name": "Standard"
            },
            "properties": {}
        },
        // Enables the Site Reovery Events to be piped to a log analytics workspace for further analysis / alerts, etc
        {
            "type": "Microsoft.RecoveryServices/vaults/providers/diagnosticSettings",
            "apiVersion": "2017-05-01-preview",
            "name": "[concat(parameters('recoveryVaultName'), '/Microsoft.Insights/', 'DiagnosticsToLogAnalytics')]",
            "dependsOn": [
                "[resourceId('Microsoft.RecoveryServices/vaults', parameters('recoveryVaultName'))]"
            ],
            "properties": {
                "workspaceId": "[resourceId(parameters('logAnalyticsResourceGroupName'),'Microsoft.OperationalInsights/workspaces',parameters('logAnalyticsName'))]",
                "logs": [
                    {
                        "category": "AzureSiteRecoveryEvents",
                        "enabled": true
                    }
                ]
            }
        },
        {
            // Storage configuration to make LRS instead of GRS-default as we're already in the DR location
            "type": "Microsoft.RecoveryServices/vaults/backupstorageconfig",
            "name": "[concat(parameters('recoveryVaultName'), '/vaultstorageconfig')]",
            "apiVersion": "2018-01-10",
            "dependsOn": [
                "[resourceId('Microsoft.RecoveryServices/vaults/', parameters('recoveryVaultName'))]"
            ],
            "properties": {
                "StorageModelType": "LocallyRedundant"
            }
        },
        {
            // Replication Policy - matches the ASR default
            "type": "Microsoft.RecoveryServices/vaults/replicationPolicies",
            "apiVersion": "2018-01-10",
            "name": "[concat(parameters('recoveryVaultName'), '/24-hour-retention-policy')]",
            "dependsOn": [
                "[resourceId('Microsoft.RecoveryServices/vaults', parameters('recoveryVaultName'))]"
            ],
            "properties": {
                "providerSpecificInput": {
                    "instanceType": "A2A",
                    "appConsistentFrequencyInMinutes": 240,
                    "crashConsistentFrequencyInMinutes": 5,
                    "recoveryPointHistory": 1440,
                    "multiVmSyncStatus": "Enable"
                }
            }
        },
        {
            // Replication Fabric - Target Side
            "type": "Microsoft.RecoveryServices/vaults/replicationFabrics",
            "apiVersion": "2018-01-10",
            "name": "[variables('targetFabricName')]",
            "dependsOn": [
                "[resourceId('Microsoft.RecoveryServices/vaults', parameters('recoveryVaultName'))]",
                "[variables('sourceFabricId')]"
            ],
            "properties": {
                "customDetails": {
                    "instanceType": "Azure",
                    "location": "[parameters('locationDR')]"
                }
            }
        },
        {
            // Replication Fabric - Source Side
            "type": "Microsoft.RecoveryServices/vaults/replicationFabrics",
            "apiVersion": "2018-01-10",
            "name": "[variables('sourceFabricName')]",
            "dependsOn": [
                "[resourceId('Microsoft.RecoveryServices/vaults', parameters('recoveryVaultName'))]"
            ],
            "properties": {
                "customDetails": {
                    "instanceType": "Azure",
                    "location": "[parameters('location')]"
                }
            }
        },
        {
            // Replication Container - Source Side
            "type": "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers",
            "apiVersion": "2018-01-10",
            "name": "[variables('sourceContainerName')]",
            "dependsOn": [
                "[variables('sourceFabricId')]"
            ],
            "properties": {
                "providerSpecificDetails": [
                    {
                        "instanceType": "A2A"
                    }
                ]
            }
        },
        {
            // Replication Container - Target Side
            "type": "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers",
            "apiVersion": "2018-01-10",
            "name": "[variables('targetContainerName')]",
            "dependsOn": [
                "[variables('targetFabricId')]"
            ],
            "properties": {
                "providerSpecificDetails": [
                    {
                        "instanceType": "A2A"
                    }
                ]
            }
        },
        {
            // Replication Protection Container Mapping - Source Side
            "type": "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectionContainerMappings",
            "apiVersion": "2018-01-10",
            "name": "[variables('sourceContainerMappingName')]",
            "dependsOn": [
                "[variables('targetFabricId')]",
                "[variables('sourceFabricId')]",
                "[resourceId('Microsoft.RecoveryServices/vaults/replicationPolicies', parameters('recoveryVaultName'), '24-hour-retention-policy')]",
                "[resourceId('Microsoft.Automation/automationAccounts',parameters('automationAccountName'))]"
            ],
            "properties": {
                "targetProtectionContainerId": "[variables('targetContainerId')]",
                "policyId": "[resourceId('Microsoft.RecoveryServices/vaults/replicationPolicies', parameters('recoveryVaultName'), '24-hour-retention-policy')]",
                "providerSpecificInput": {
                    "instanceType": "A2A",
                    // This will create jobs in the automation account to update the mobility agents in the 2 fabrics. Make sure the automation account
                    // has proper RBAC permissions on the Recovery Vault resource. I put it as contributor.
                    "agentAutoUpdateStatus": "Enabled",
                    "automationAccountArmId": "[resourceId('Microsoft.Automation/automationAccounts',parameters('automationAccountName'))]"
                }
            }
        },
        {
            // Replication Protection Container Mapping - Target Side
            "type": "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectionContainerMappings",
            "apiVersion": "2018-01-10",
            "name": "[variables('targetContainerMappingName')]",
            "dependsOn": [
                "[variables('sourceContainerMappingId')]",
                "[resourceId('Microsoft.RecoveryServices/vaults/replicationPolicies', parameters('recoveryVaultName'), '24-hour-retention-policy')]",
                "[resourceId('Microsoft.Automation/automationAccounts',parameters('automationAccountName'))]"
            ],
            "properties": {
                "targetProtectionContainerId": "[variables('sourceContainerId')]",
                "policyId": "[resourceId('Microsoft.RecoveryServices/vaults/replicationPolicies', parameters('recoveryVaultName'), '24-hour-retention-policy')]",
                "providerSpecificInput": {
                    "instanceType": "A2A",
                    "agentAutoUpdateStatus": "Enabled",
                    "automationAccountArmId": "[resourceId('Microsoft.Automation/automationAccounts',parameters('automationAccountName'))]"
                }
            }
        },
        {
            // Replication Network Mapping - Source Side
            "type": "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationNetworks/replicationNetworkMappings",
            "apiVersion": "2018-07-10",
            "name": "[variables('sourcevNetMappingName')]",
            "dependsOn": [
                "[variables('sourceFabricId')]",
                "[variables('targetFabricId')]"
            ],
            "properties": {
                "recoveryFabricName": "[concat(parameters('locationDR'),'-fabric')]",
                "recoveryNetworkId": "[resourceId(parameters('vnetResourceGroupNameDR'),'Microsoft.Network/virtualNetworks', parameters('vNetNameDR'))]",
                "fabricSpecificDetails": {
                    "instanceType": "AzureToAzure",
                    "primaryNetworkId": "[resourceId(parameters('vnetResourceGroupName'),'Microsoft.Network/virtualNetworks', parameters('vNetName'))]"
                }
            }
        },
        {
            // Replication Network Mapping - Target Side
            "type": "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationNetworks/replicationNetworkMappings",
            "apiVersion": "2018-07-10",
            "name": "[variables('targetvNetMappingName')]",
            "dependsOn": [
                "[variables('sourcevNetMappingId')]",
                "[variables('sourceFabricId')]",
                "[variables('targetFabricId')]"
            ],
            "properties": {
                "recoveryFabricName": "[concat(parameters('location'),'-fabric')]",
                "recoveryNetworkId": "[resourceId(parameters('vnetResourceGroupName'),'Microsoft.Network/virtualNetworks', parameters('vNetName'))]",
                "fabricSpecificDetails": {
                    "instanceType": "AzureToAzure",
                    "primaryNetworkId": "[resourceId(parameters('vnetResourceGroupNameDR'),'Microsoft.Network/virtualNetworks', parameters('vNetNameDR'))]"
                }
            }
        },
        // protected items
        {
            // WEB 1
            "type": "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems",
            "apiVersion": "2018-01-10",
            "name": "[concat(parameters('recoveryVaultName'),'/',parameters('location'),'-fabric','/',parameters('location'),'-container/','web1')]",
            "dependsOn": [
                "[variables('sourceContainerId')]",
                "[variables('targetContainerId')]",
                "[variables('sourcevNetMappingId')]",
                "[variables('targetvNetMappingId')]",
                "[resourceId('Microsoft.RecoveryServices/vaults/replicationPolicies', parameters('recoveryVaultName'), '24-hour-retention-policy')]"
            ],
            "properties": {
                "policyId": "[resourceId('Microsoft.RecoveryServices/vaults/replicationPolicies', parameters('recoveryVaultName'), '24-hour-retention-policy')]",
                "providerSpecificDetails": {
                    "instanceType": "A2A",
                    "fabricObjectId": "[resourceId(variables('webSourceResourceGroupName'), 'Microsoft.Compute/virtualmachines',variables('web1').name)]",
                    "recoveryContainerId": "[variables('targetContainerId')]",
                    "recoveryResourceGroupId": "[concat(subscription().id,'/resourceGroups/',variables('webDestinationResourceGroupName'))]",
                    "primaryFabricLocation": "[parameters('location')]",
                    "recoveryFabricLocation": "[parameters('locationDR')]",
                    // If your virtual machines use availability sets and not availability zones, use the property below instead of recoveryAvailabilityZone
                    //"recoveryAvailabilitySetId": "[resourceId(variables('webDestinationResourceGroupName'), 'Microsoft.Compute/availabilitySets',variables('web1').availabilitySet)]",
                    "recoveryAvailabilityZone": "[variables('web1').zone]",
                    "recoveryAzureVMSize": "[reference(resourceId(variables('webSourceResourceGroupName'), 'Microsoft.Compute/virtualmachines', variables('web1').name), '2019-07-01').hardwareprofile.vmSize]",
                    "recoveryAzureNetworkId": "[resourceId(parameters('vnetResourceGroupNameDR'),'Microsoft.Network/virtualNetworks', parameters('vNetNameDR'))]",
                    "recoverySubnetName": "[variables('web1').subnetNameDR]",
                    // "recoveryBootDiagStorageAccountId": "[resourceId(parameters('resourceGroups').global.destination,'Microsoft.Storage/storageAccounts',parameters('diagnosticsLogStorageAccountNameDR'))]",
                    "recoveryBootDiagStorageAccountId": "[resourceId(parameters('resourceGroups'),'Microsoft.Storage/storageAccounts',parameters('diagnosticsLogStorageAccountNameDR'))]",
                    "vmManagedDisks": [
                        {
                            // OS Disk, get ID from VM reference
                            "diskId": "[reference(resourceId(variables('webSourceResourceGroupName'), 'Microsoft.Compute/virtualmachines', variables('web1').name), '2019-07-01').storageProfile.osDisk.managedDisk.id]",
                            "recoveryResourceGroupId": "[concat(subscription().id,'/resourceGroups/',variables('webDestinationResourceGroupName'))]",
                            // To get the disk type, the VM needs to be up. If you always have the same type, it can be changed by a parameter or variable
                            "recoveryTargetDiskAccountType": "[reference(resourceId(variables('webSourceResourceGroupName'), 'Microsoft.Compute/virtualmachines', variables('web1').name), '2019-07-01').storageProfile.osDisk.managedDisk.storageAccountType]",
                            "primaryStagingAzureStorageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('cacheStorageAccountName'))]"
                        },
                        // If your VM has data disks, add them here. The dataDisk property starts at zero (array). Remove it if you do not use data disks
                        {
                            // Data Disk #1
                            "diskId": "[reference(resourceId(variables('webSourceResourceGroupName'), 'Microsoft.Compute/virtualmachines', variables('web1').name), '2019-07-01').storageProfile.datadisks[0].managedDisk.id]",
                            "recoveryResourceGroupId": "[concat(subscription().id,'/resourceGroups/',variables('webDestinationResourceGroupName'))]",
                            // To get the disk type, the VM needs to be up. If you always have the same type, it can be changed by a parameter or variable
                            "recoveryTargetDiskAccountType": "[reference(resourceId(variables('webSourceResourceGroupName'), 'Microsoft.Compute/virtualmachines', variables('web1').name), '2019-07-01').storageProfile.datadisks[0].managedDisk.storageAccountType]",
                            "primaryStagingAzureStorageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('cacheStorageAccountName'))]"
                        }
                    ]
                }
            }
        },
        {
            // WEB 2
            "type": "Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems",
            "apiVersion": "2018-01-10",
            "name": "[concat(parameters('recoveryVaultName'),'/',parameters('location'),'-fabric','/',parameters('location'),'-container/','web2')]",
            "dependsOn": [
                "[variables('sourceContainerId')]",
                "[variables('targetContainerId')]",
                "[variables('sourcevNetMappingId')]",
                "[variables('targetvNetMappingId')]",
                "[resourceId('Microsoft.RecoveryServices/vaults/replicationPolicies', parameters('recoveryVaultName'), '24-hour-retention-policy')]"
            ],
            "properties": {
                "policyId": "[resourceId('Microsoft.RecoveryServices/vaults/replicationPolicies', parameters('recoveryVaultName'), '24-hour-retention-policy')]",
                "providerSpecificDetails": {
                    "instanceType": "A2A",
                    "fabricObjectId": "[resourceId(variables('webSourceResourceGroupName'), 'Microsoft.Compute/virtualmachines',variables('web2').name)]",
                    "recoveryContainerId": "[variables('targetContainerId')]",
                    "recoveryResourceGroupId": "[concat(subscription().id,'/resourceGroups/',variables('webDestinationResourceGroupName'))]",
                    "primaryFabricLocation": "[parameters('location')]",
                    "recoveryFabricLocation": "[parameters('locationDR')]",
                    // If your virtual machines use availability sets and not availability zones, use the property below instead of recoveryAvailabilityZone
                    //"recoveryAvailabilitySetId": "[resourceId(variables('webDestinationResourceGroupName'), 'Microsoft.Compute/availabilitySets',variables('web2').availabilitySet)]",
                    "recoveryAvailabilityZone": "[variables('web2').zone]",
                    "recoveryAzureVMSize": "[reference(resourceId(variables('webSourceResourceGroupName'), 'Microsoft.Compute/virtualmachines', variables('web2').name), '2019-07-01').hardwareprofile.vmSize]",
                    "recoveryAzureNetworkId": "[resourceId(parameters('vnetResourceGroupNameDR'),'Microsoft.Network/virtualNetworks', parameters('vNetNameDR'))]",
                    "recoverySubnetName": "[variables('web2').subnetNameDR]",
                    // "recoveryBootDiagStorageAccountId": "[resourceId(parameters('resourceGroups').global.destination,'Microsoft.Storage/storageAccounts',parameters('diagnosticsLogStorageAccountNameDR'))]",
                    "recoveryBootDiagStorageAccountId": "[resourceId(parameters('resourceGroups'),'Microsoft.Storage/storageAccounts',parameters('diagnosticsLogStorageAccountNameDR'))]",
                    "vmManagedDisks": [
                        {
                            // OS Disk, get ID from VM reference
                            "diskId": "[reference(resourceId(variables('webSourceResourceGroupName'), 'Microsoft.Compute/virtualmachines', variables('web2').name), '2019-07-01').storageProfile.osDisk.managedDisk.id]",
                            "recoveryResourceGroupId": "[concat(subscription().id,'/resourceGroups/',variables('webDestinationResourceGroupName'))]",
                            // To get the disk type, the VM needs to be up. If you always have the same type, it can be changed by a parameter or variable
                            "recoveryTargetDiskAccountType": "[reference(resourceId(variables('webSourceResourceGroupName'), 'Microsoft.Compute/virtualmachines', variables('web2').name), '2019-07-01').storageProfile.osDisk.managedDisk.storageAccountType]",
                            "primaryStagingAzureStorageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('cacheStorageAccountName'))]"
                        },
                        // If your VM has data disks, add them here. The dataDisk property starts at zero (array). Remove it if you do not use data disks
                        {
                            // Data Disk #1
                            "diskId": "[reference(resourceId(variables('webSourceResourceGroupName'), 'Microsoft.Compute/virtualmachines', variables('web2').name), '2019-07-01').storageProfile.datadisks[0].managedDisk.id]",
                            "recoveryResourceGroupId": "[concat(subscription().id,'/resourceGroups/',variables('webDestinationResourceGroupName'))]",
                            // To get the disk type, the VM needs to be up. If you always have the same type, it can be changed by a parameter or variable
                            "recoveryTargetDiskAccountType": "[reference(resourceId(variables('webSourceResourceGroupName'), 'Microsoft.Compute/virtualmachines', variables('web2').name), '2019-07-01').storageProfile.datadisks[0].managedDisk.storageAccountType]",
                            "primaryStagingAzureStorageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('cacheStorageAccountName'))]"
                        }
                    ]
                }
            }
        },
        // Deploying Automation Account in DR Region
        {
            // Automation account should be deployed in the DR region as if there's an outage in the main region, you can still run the runbooks and what is necessary
            "name": "[parameters('automationAccountName')]",
            "type": "Microsoft.Automation/automationAccounts",
            "apiVersion": "2015-10-31",
            "location": "[parameters('locationDR')]",
            "properties": {
                "sku": {
                    "name": "Basic"
                }
            }
        },
        // Loading required PowerShell Modules into Automation Account
        {
            // Az.Accounts module, must do first.
            "apiVersion": "2015-10-31",
            "type": "Microsoft.Automation/automationAccounts/modules",
            "name": "[concat(parameters('automationAccountName'), '/', variables('azAccounts').name)]",
            "location": "[parameters('locationDR')]",
            "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
            ],
            "properties": {
                "contentLink": {
                    "uri": "[variables('azAccounts').url]"
                }
            }
        },
        {
            // Remaining dependent modules, needs Az.Accounts as a re-req
            "apiVersion": "2015-10-31",
            "type": "Microsoft.Automation/automationAccounts/modules",
            "name": "[concat(parameters('automationAccountName'), '/', variables('asrScripts').modules[copyIndex()].name)]",
            "location": "[parameters('locationDR')]",
            "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]",
                "[resourceId('Microsoft.Automation/automationAccounts/modules', parameters('automationAccountName'), variables('azAccounts').name)]"
            ],
            "properties": {
                "contentLink": {
                    "uri": "[variables('asrScripts').modules[copyIndex()].url]"
                }
            },
            "copy": {
                "name": "modulesLoop",
                "count": "[length(variables('asrScripts').modules)]"
            }
        },
        {
            // Runbooks - A single resource looping through the "asrScripts" variable containing multiple runbooks
            "apiVersion": "2015-10-31",
            "type": "Microsoft.Automation/automationAccounts/runbooks",
            "name": "[concat(parameters('automationAccountName'), '/', variables('asrScripts').runbooks[copyIndex()].name)]",
            "location": "[parameters('locationDR')]",
            "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
            ],
            "properties": {
                "description": "[variables('asrScripts').runbooks[copyIndex()].description]",
                "runbookType": "[variables('asrScripts').runbooks[copyIndex()].type]",
                "logProgress": false,
                "logVerbose": false,
                "publishContentLink": {
                    "uri": "[variables('asrScripts').runbooks[copyIndex()].url]"
                }
            },
            "copy": {
                "name": "runbooksLoop",
                "count": "[length(variables('asrScripts').runbooks)]"
            }
        },
        {
            "type": "Microsoft.RecoveryServices/vaults/replicationRecoveryPlans",
            "apiVersion": "2018-01-10",
            "name": "[concat(parameters('recoveryVaultName'),'/','Failover-Plan')]",
            // Note: Once this is deployed, it cannot be deployed again; platform limitation.
            // To update, need to go through CLI or Portal or delete it from the portal and re-run this ARM
            "condition": "[parameters('deployRecoveryPlan')]",
            "dependsOn": [
                "[resourceId('Microsoft.RecoveryServices/vaults', parameters('recoveryVaultName'))]",
                "[variables('sourceFabricId')]",
                "[variables('targetFabricId')]",
                "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]",
                // Also depend on a runbook being added, which comes in this template
                "[resourceId('Microsoft.Automation/automationAccounts/runbooks',parameters('automationAccountName'),variables('asrScripts').runbooks[0].name)]",
                // Also depends on each VM being protected too, otherwise it errors out
                "[resourceId('Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems',parameters('recoveryVaultName'),concat(parameters('location'),'-fabric'),concat(parameters('location'),'-container'),'web1')]"
            ],
            "properties": {
                "primaryFabricId": "[variables('sourceFabricId')]",
                "recoveryFabricId": "[variables('targetFabricId')]",
                "failoverDeploymentModel": "ResourceManager",
                "groups": [
                    {
                        "groupType": "Boot",
                        "replicationProtectedItems": [
                            {
                                // WEB-1
                                "id": "[resourceId('Microsoft.RecoveryServices/vaults/replicationFabrics/replicationProtectionContainers/replicationProtectedItems',parameters('recoveryVaultName'),concat(parameters('location'),'-fabric'),concat(parameters('location'),'-container'),'web1')]",
                                "virtualMachineId": "[resourceId(variables('webSourceResourceGroupName'), 'Microsoft.Compute/virtualmachines',variables('web1').name)]"
                            }
                        ],
                        "endGroupActions": [
                            {
                                "actionName": "Runbook: Configure User Managed Identities",
                                "failoverTypes": [
                                    "UnplannedFailover",
                                    "PlannedFailover"
                                ],
                                "failoverDirections": [
                                    "PrimaryToRecovery",
                                    "RecoveryToPrimary"
                                ],
                                "customDetails": {
                                    "instanceType": "AutomationRunbookActionDetails",
                                    "description": "ASR doesn't set managed identities. This runbook will re-set them on the virtual machines",
                                    "runbookId": "[resourceId('Microsoft.Automation/automationAccounts/runbooks',parameters('automationAccountName'),variables('asrScripts').runbooks[0].name)]",
                                    //"timeout": "",
                                    "fabricLocation": "Recovery"
                                }
                            },
                            {
                                "actionName": "Tell your coworkers that the DR is done",
                                "failoverTypes": [
                                    "UnplannedFailover",
                                    "PlannedFailover"
                                ],
                                "failoverDirections": [
                                    "PrimaryToRecovery",
                                    "RecoveryToPrimary"
                                ],
                                "customDetails": {
                                    "instanceType": "ManualActionDetails",
                                    "description": "This is an example of manual step that will require your completion when running the failover plan. A comment can be added for log purposes"
                                }
                            }
                        ]
                    }
                ]
            }
        }
    ],
    "outputs": {},
    "functions": []
}